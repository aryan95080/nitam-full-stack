// Description
/**
in terminal 
install npm  i react-router-dom for(create multiple routes)
and react-toastify for(to notification)


// for backend 
create a folder ,the name of folder is backend and right click on the backend folder and click on open in integrate terminal
and instal npm init ,npm i cors dotenv express jsonwebtoken mongoose nodemon razorpay stripe validator cloudinary bcrypt
These are commonly used Node.js packages for building robust web applications, especially when working with Express.js, MongoDB, and payment gateways. Here's a breakdown of each package and its purpose:

1. npm init
Purpose: Initializes a new Node.js project by creating a package.json file.

npm init -y
The -y flag auto-generates the default configuration without asking multiple prompts.

2. npm i cors
Purpose: Enables Cross-Origin Resource Sharing (CORS), allowing your API to handle requests from different origins (domains).

Usage Example:
js
import cors from 'cors';
app.use(cors({ origin: 'http://localhost:3000' })); // Allows requests from frontend

3. npm i dotenv
Purpose: Loads environment variables from a .env file into process.env, keeping sensitive data (like API keys) safe.
Usage Example:
js
import dotenv from 'dotenv';
dotenv.config();
console.log(process.env.MONGO_URI);  // Access environment variable
4. npm i express
Purpose: A minimalist web framework for building APIs and web applications.
Usage Example:
js

import express from 'express';
const app = express();
app.get('/', (req, res) => res.send('Hello World!'));
app.listen(3000, () => console.log('Server running on port 3000'));
5. npm i jsonwebtoken
Purpose: Used to create, verify, and manage JWT tokens for secure authentication and authorization.
Usage Example:
js

import jwt from 'jsonwebtoken';
const token = jwt.sign({ userId: 123 }, 'yourSecretKey', { expiresIn: '1h' });
jwt.verify(token, 'yourSecretKey', (err, decoded) => console.log(decoded));
6. npm i mongoose
Purpose: An ODM (Object Data Modeling) library for MongoDB in Node.js, simplifying database operations.
Usage Example:
js

import mongoose from 'mongoose';
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('DB Connected'))
  .catch(err => console.log('DB Connection Error:', err));
7. npm i nodemon
Purpose: Automatically restarts the server when file changes are detected during development.
Usage:
In package.json add:
json

"scripts": {
  "start": "nodemon index.js"
}
Run with:

bash
Copy
Edit
npm start
8. npm i razorpay
Purpose: Integrates Razorpay as a payment gateway in your application for secure transactions.
Usage Example:
js

import Razorpay from 'razorpay';
const razorpay = new Razorpay({ key_id: 'YOUR_KEY_ID', key_secret: 'YOUR_KEY_SECRET' });
9. npm i stripe
Purpose: Enables integration with Stripe for handling online payments securely.
Usage Example:
js

import Stripe from 'stripe';
const stripe = new Stripe('YOUR_SECRET_KEY');
10. npm i validator
Purpose: Provides robust data validation methods for emails, URLs, etc.
Usage Example:
js

import validator from 'validator';
console.log(validator.isEmail('test@example.com')); // true
11. npm i cloudinary
Purpose: Integrates with Cloudinary for image and video storage in the cloud.
Usage Example:
js

import cloudinary from 'cloudinary';
cloudinary.v2.uploader.upload('path/to/image.jpg', (result) => console.log(result));
12. npm i bcrypt
Purpose: Used for hashing and securely storing user passwords.
Usage Example:
js

import bcrypt from 'bcrypt';
const hashedPassword = await bcrypt.hash('password123', 10);
const isMatch = await bcrypt.compare('password123', hashedPassword);
console.log(isMatch);  // true

For integrating UPI and banking payment methods in your application, you can use these popular Node.js libraries and services that support Indian payment gateways and international banking solutions:

1. razorpay (Recommended for UPI in India)
Best for: Indian market, UPI, cards, net banking, wallets.
Features: Fast UPI integration, recurring payments, and real-time transaction tracking.
Installation:
bash
Copy
Edit
npm i razorpay
Usage Example:
js
Copy
Edit
import Razorpay from 'razorpay';

const instance = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET
});

app.post('/api/payment', async (req, res) => {
  const options = {
    amount: 50000, // Amount in paise (â‚¹500)
    currency: 'INR',
    receipt: 'order_rcptid_11'
  };

  const order = await instance.orders.create(options);
  res.json(order);
});
2. cashfree-sdk (Popular for UPI and Net Banking in India)
Best for: UPI, NEFT, IMPS, and Indian bank transactions.
Installation:
bash
Copy
Edit
npm i cashfree-sdk
Usage Example:
js
Copy
Edit
import Cashfree from 'cashfree-sdk';

Cashfree.init({
  env: 'TEST',  // Use 'PROD' for live environment
  appId: process.env.CASHFREE_APP_ID,
  secretKey: process.env.CASHFREE_SECRET_KEY
});

app.post('/payment', async (req, res) => {
  const response = await Cashfree.PG.createOrder({
    orderId: 'order_123',
    orderAmount: 500,
    customerName: 'John Doe',
    customerEmail: 'john@example.com',
    customerPhone: '9999999999'
  });

  res.json(response);
});
3. paytmchecksum (For Paytm Gateway Integration)
Best for: UPI, wallet, net banking, and cards.
Installation:
bash
Copy
Edit
npm i paytmchecksum
Usage Example:
js
Copy
Edit
import checksum_lib from 'paytmchecksum';

const paytmParams = {
  MID: 'YOUR_MERCHANT_ID',
  ORDER_ID: 'ORDER12345',
  CUST_ID: 'CUSTOMER001',
  TXN_AMOUNT: '500',
  CHANNEL_ID: 'WEB',
  INDUSTRY_TYPE_ID: 'Retail',
  WEBSITE: 'WEBSTAGING'
};

checksum_lib.generateSignature(paytmParams, 'YOUR_MERCHANT_KEY')
  .then((checksum) => console.log(checksum));
4. instamojo-node (Best for Small-Medium Indian Businesses)
Best for: Simple payment links for UPI, banking, and cards.
Installation:
bash
Copy
Edit
npm i instamojo-node
Usage Example:
js
Copy
Edit
import Instamojo from 'instamojo-nodejs';

Instamojo.isSandboxMode(true); // Enable test mode
Instamojo.setKeys(process.env.INSTAMOJO_API_KEY, process.env.INSTAMOJO_AUTH_KEY);

const data = {
  purpose: "Test Payment",
  amount: "500",
  buyer_name: "John Doe",
  email: "john@example.com",
  phone: "9999999999",
  redirect_url: "https://yourwebsite.com/callback"
};

Instamojo.createPayment(data, (error, response) => {
  if (error) console.error(error);
  else console.log(response);
});
5. ccavenue (Best for Enterprise Banking Solutions in India)
Best for: High-volume transactions, net banking, UPI, and credit cards.
Installation:
bash
Copy
Edit
npm i ccavenue
6. phonepe (For Seamless UPI Integration)
Best for: Fast UPI payments in India with secure OTP flow.
Installation:
bash
Copy
Edit
npm i phonepe
7. stripe (For Global Payments Including UPI)
Best for: International banking, cards, and digital wallets.
Installation:
bash
Copy
Edit
npm i stripe
Usage Example for UPI Payments:
js
Copy
Edit
import Stripe from 'stripe';
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

app.post('/api/create-payment-intent', async (req, res) => {
  const paymentIntent = await stripe.paymentIntents.create({
    amount: 50000, // Amount in smallest currency unit
    currency: 'inr',
    payment_method_types: ['upi']  // Supports UPI
  });

  res.json({ clientSecret: paymentIntent.client_secret });
});
ðŸš€ Recommended Setup for UPI and Banking Integration
For Indian Market â†’ Razorpay, Cashfree, Paytm, PhonePe
For International Payments â†’ Stripe, PayPal
For Easy Setup â†’ Instamojo for quick payment links

 */